                                                THREE SUM

QUESTION:

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.
Notice that the order of the output and the order of the triplets does not matter.

Brute force
Using three nested loops
-1 0 1 2 -1 4
-1 0 1      O(n^3)


Optimal Approach

Using two nested loops
Time complexity O(n^2)

for loop = once
nested while loop = two pointers (two sum)

HashSet = eliminate the duplicate triplets
Sort the array
 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Example 2:

Input: nums = [0,1,1]
Output: []

Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]





 [-1,0,1,2,-1,-4]
 a+b+c=0
 -1 + b + c = 0

 b+c=0-(-1)
 b+c =1 (two pointers approach)

 target=(0-(a))
 array from index+1 of a till the end = two sum
 start=i+1
 end=arr.length-1 